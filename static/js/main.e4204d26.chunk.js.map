{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","style","fontWeight","isBold","backgroundColor","isWin","value","Board","i","this","squares","position","includes","key","console","log","array","map","index","elements","item","renderSquare","Component","Game","handleClick","history","state","slice","stepNumber","length","calculateWinner","xIsNext","setState","concat","lines","a","b","c","Array","fill","des","step","current","winner","set","filter","x","moves","move","desc","Math","floor","jumpTo","status","reverse","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e4204d26.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Square.css'\r\n\r\nfunction Square(props) {\r\n  const myStyle = () => {\r\n    return ({\r\n      fontWeight: props.isBold ? 'bold' : 'normal',\r\n      backgroundColor: props.isWin ? \"DodgerBlue\" : \"\"\r\n    }); \r\n  }\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick} style={myStyle()}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Square from './../Square/Square'\r\n\r\nclass Board extends Component {\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        isBold={this.props.position === i}\r\n        isWin={this.props.isWin.position.includes(i)}\r\n        key = {i}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Vo\")\r\n    const array = [0, 1, 2];\r\n    const squares = array.map((value, index) => {\r\n      const elements = array.map(item => this.renderSquare(value * 3 + item))\r\n      return (\r\n        <div className=\"board-row\" key = {index}>\r\n          {elements}\r\n        </div>\r\n      );\r\n    })\r\n    return (\r\n      <Fragment>\r\n        {squares}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from 'react';\r\nimport Board from './../Board/Board'\r\nimport './Game.css';\r\n\r\nclass Game extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n          position: null\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n      des: false\r\n    };\r\n  }\r\n\r\n  handleClick = (i) => {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (this.calculateWinner(squares).value || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n          position: i\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = this.calculateWinner(current.squares);\r\n\r\n    const set = current.squares.filter(x => x === null).length;\r\n\r\n    let moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move + \" ( \" + Math.floor(step.position / 3) + \", \" + step.position % 3 + \" )\" :\r\n        'Go to game start';\r\n      const {stepNumber} = this.state;   \r\n      return (\r\n        <li key={move}>\r\n          {stepNumber === move? <button onClick={() => this.jumpTo(move)} style = {{fontWeight: 'bold'}}>{desc}</button> : <button onClick={() => this.jumpTo(move)}>{desc}</button>}\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status = winner.value ? 'Winner: ' + winner.value : (set === 0 ? \"Equal\" : 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'));\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board squares={current.squares} onClick={this.handleClick} position={current.position} isWin={winner} />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button onClick = {()=>this.setState({des: !this.state.des})}>Sort</button>\r\n          <ol>{this.state.des ? moves.reverse() : moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return {\r\n          value: squares[a],\r\n          position: [a, b, c]\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      value: null,\r\n      position: []\r\n    };\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\nimport { Fragment } from 'react';\nimport './App.css';\nimport Game from './components/Game/Game'\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Game/>\n      </Fragment>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}